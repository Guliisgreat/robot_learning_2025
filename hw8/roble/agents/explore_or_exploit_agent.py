from collections import OrderedDict

from hw8.roble.critics.dqn_critic import DQNCritic
from hw8.roble.critics.cql_critic import CQLCritic
from hw8.roble.infrastructure.replay_buffer import ReplayBuffer
from hw8.roble.infrastructure.utils import *
from hw8.roble.policies.argmax_policy import ArgMaxPolicy
from hw8.roble.infrastructure.dqn_utils import MemoryOptimizedReplayBuffer
from .dqn_agent import DQNAgent
import numpy as np


class ExplorationOrExploitationAgent(DQNAgent):
    
    def __init__(self, env, agent_params, normalize_rnd=True, rnd_gamma=0.99):
        super(ExplorationOrExploitationAgent, self).__init__(env, agent_params)
        
        self.replay_buffer = MemoryOptimizedReplayBuffer(agent_params['replay_buffer_size'], agent_params['frame_history_len'], float_obs=True) 
        self.num_exploration_steps = agent_params['alg']['num_exploration_steps']
        self.offline_exploitation = agent_params['alg']['offline_exploitation']

        self.exploitation_critic = CQLCritic(agent_params, self.optimizer_spec)
        # self.exploration_critic = DQNCritic(agent_params, self.optimizer_spec)
        self.exploration_critic = DQNCritic(**agent_params)
        
        # self.exploration_model = DQNAgent(agent_params, self.optimizer_spec)
        self.exploration_model = DQNAgent(env, agent_params)

        self.explore_weight_schedule = agent_params['explore_weight_schedule']
        self.exploit_weight_schedule = agent_params['exploit_weight_schedule']
        
        self.actor = ArgMaxPolicy(self.exploration_critic)
        self.eval_policy = ArgMaxPolicy(self.exploitation_critic)
        self.exploit_rew_shift = agent_params['alg']['exploit_rew_shift']
        self.exploit_rew_scale = agent_params['alg']['exploit_rew_scale']
        self.eps = agent_params['alg']['eps']

        self.running_rnd_rew_std = 1
        self.normalize_rnd = normalize_rnd
        self.rnd_gamma = rnd_gamma
        
        # For tracking exploration statistics
        self.exploration_stats = {}

    def train(self, ob_no, ac_na, re_n, next_ob_no, terminal_n): 
        log = {}

        if self.t > self.num_exploration_steps:
            # After exploration is over, set the actor to optimize the extrinsic critic
            self.actor.set_critic(self.exploitation_critic)

        if (self.t > self.learning_starts
                and self.t % self.learning_freq == 0
                and self.replay_buffer.can_sample(self.batch_size)
        ):

            # Get Reward Weights
            # Get the current explore reward weight and exploit reward weight
            # using the schedules passed in (see __init__)
            explore_weight = self.explore_weight_schedule.value(self.t)
            exploit_weight = self.exploit_weight_schedule.value(self.t)

            # Run Exploration Model
            # Evaluate the exploration model on s to get the exploration bonus
            expl_bonus = self.exploration_model.get_prediction_error(ob_no)
            
            # Normalize exploration bonus
            if self.normalize_rnd:
                # Update running std with exponential moving average
                self.running_rnd_rew_std = self.rnd_gamma * self.running_rnd_rew_std + (1 - self.rnd_gamma) * np.std(expl_bonus)
                expl_bonus = expl_bonus / (self.running_rnd_rew_std + 1e-8)  # Add small epsilon for numerical stability

            # Reward Calculations
            # Calculate mixed rewards, which will be passed into the exploration critic
            mixed_reward = explore_weight * expl_bonus + exploit_weight * re_n

            # Calculate the environment reward
            # For part 1, env_reward is just 're_n'
            # After this, env_reward is 're_n' shifted by self.exploit_rew_shift,
            # and scaled by self.exploit_rew_scale
            env_reward = (re_n + self.exploit_rew_shift) * self.exploit_rew_scale

            # Update Critics And Exploration Model

            # 1) Update the exploration model (based off s')
            expl_model_loss = self.exploration_model.train_prediction_model(next_ob_no)
            
            # 2) Update the exploration critic (based off mixed_reward)
            exploration_critic_loss = self.exploration_critic.update(
                ob_no, ac_na, next_ob_no, mixed_reward, terminal_n
            )
            
            # 3) Update the exploitation critic (based off env_reward)
            exploitation_critic_loss = self.exploitation_critic.update(
                ob_no, ac_na, next_ob_no, env_reward, terminal_n
            )

            # Target Networks
            if self.num_param_updates % self.target_update_freq == 0:
                # Update the exploitation and exploration target networks
                self.exploitation_critic.update_target_network()
                self.exploration_critic.update_target_network()

            # Logging
            log['Exploitation Critic Loss'] = exploitation_critic_loss['Training Loss']
            log['Exploration Critic Loss'] = exploration_critic_loss['Training Loss']
            log['Exploration Model Loss'] = expl_model_loss
            
            # Update exploration statistics for logging
            self.exploration_stats = {
                'explore_weight': explore_weight,
                'exploit_weight': exploit_weight,
                'mean_expl_bonus': np.mean(expl_bonus),
                'max_expl_bonus': np.max(expl_bonus),
                'min_expl_bonus': np.min(expl_bonus),
                'std_expl_bonus': np.std(expl_bonus),
                'running_rnd_rew_std': self.running_rnd_rew_std
            }

            # Uncomment these lines after completing cql_critic.py
            if self.exploitation_critic.cql_alpha >= 0:
                log['Exploitation Data q-values'] = exploitation_critic_loss['Data q-values']
                log['Exploitation OOD q-values'] = exploitation_critic_loss['OOD q-values']
                log['Exploitation CQL Loss'] = exploitation_critic_loss['CQL Loss']

            self.num_param_updates += 1

        self.t += 1
        return log


    def step_env(self):
        """
            Step the env and store the transition
            At the end of this block of code, the simulator should have been
            advanced one step, and the replay buffer should contain one more transition.
            Note that self.last_obs must always point to the new latest observation.
        """
        if (not self.offline_exploitation) or (self.t <= self.num_exploration_steps):
            self.replay_buffer_idx = self.replay_buffer.store_frame(self.last_obs)

        perform_random_action = np.random.random() < self.eps or self.t < self.learning_starts

        if perform_random_action:
            action = self.env.action_space.sample()
        else:
            processed = self.replay_buffer.encode_recent_observation()
            action = self.actor.get_action(processed)

        next_obs, reward, done, info = self.env.step(action)
        self.last_obs = next_obs.copy()

        if (not self.offline_exploitation) or (self.t <= self.num_exploration_steps):
            self.replay_buffer.store_effect(self.replay_buffer_idx, action, reward, done)

        if done:
            self.last_obs = self.env.reset()
